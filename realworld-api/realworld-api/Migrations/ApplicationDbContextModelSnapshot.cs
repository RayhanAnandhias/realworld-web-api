// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using realworld_api.Database;

#nullable disable

namespace realworld_api.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("realworld_api.Models.Article", b =>
                {
                    b.Property<int>("id_article")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id_article"), 1L, 1);

                    b.Property<DateTime>("article_created_at")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("article_updated_at")
                        .HasColumnType("datetime2");

                    b.Property<string>("body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("favorites_count")
                        .HasColumnType("int");

                    b.Property<int?>("id_author")
                        .HasColumnType("int");

                    b.Property<string>("slug")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id_article");

                    b.HasIndex("id_author");

                    b.ToTable("article");
                });

            modelBuilder.Entity("realworld_api.Models.ArticleTag", b =>
                {
                    b.Property<int>("id_article")
                        .HasColumnType("int");

                    b.Property<int>("id_tag")
                        .HasColumnType("int");

                    b.HasKey("id_article", "id_tag");

                    b.HasIndex("id_tag");

                    b.ToTable("article_tag");
                });

            modelBuilder.Entity("realworld_api.Models.Comment", b =>
                {
                    b.Property<int>("id_comment")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id_comment"), 1L, 1);

                    b.Property<string>("comment_body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("comment_created_at")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("comment_updated_at")
                        .HasColumnType("datetime2");

                    b.Property<int>("id_article")
                        .HasColumnType("int");

                    b.Property<int>("id_user")
                        .HasColumnType("int");

                    b.HasKey("id_comment");

                    b.HasIndex("id_article");

                    b.HasIndex("id_user");

                    b.ToTable("comment");
                });

            modelBuilder.Entity("realworld_api.Models.ProfileFollowing", b =>
                {
                    b.Property<int>("id_user_observer")
                        .HasColumnType("int");

                    b.Property<int>("id_user_target")
                        .HasColumnType("int");

                    b.HasKey("id_user_observer", "id_user_target");

                    b.HasIndex("id_user_target");

                    b.ToTable("profile_following");
                });

            modelBuilder.Entity("realworld_api.Models.Tag", b =>
                {
                    b.Property<int>("id_tag")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id_tag"), 1L, 1);

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("tag_created_at")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("tag_updated_at")
                        .HasColumnType("datetime2");

                    b.HasKey("id_tag");

                    b.ToTable("tag");
                });

            modelBuilder.Entity("realworld_api.Models.User", b =>
                {
                    b.Property<int>("id_user")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id_user"), 1L, 1);

                    b.Property<string>("bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("user_created_at")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("user_updated_at")
                        .HasColumnType("datetime2");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id_user");

                    b.ToTable("user");
                });

            modelBuilder.Entity("realworld_api.Models.UserFavorite", b =>
                {
                    b.Property<int>("id_user")
                        .HasColumnType("int");

                    b.Property<int>("id_article_favorite")
                        .HasColumnType("int");

                    b.HasKey("id_user", "id_article_favorite");

                    b.HasIndex("id_article_favorite");

                    b.ToTable("user_favorite");
                });

            modelBuilder.Entity("realworld_api.Models.Article", b =>
                {
                    b.HasOne("realworld_api.Models.User", "author")
                        .WithMany("articles")
                        .HasForeignKey("id_author")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("author");
                });

            modelBuilder.Entity("realworld_api.Models.ArticleTag", b =>
                {
                    b.HasOne("realworld_api.Models.Article", "article")
                        .WithMany("tags")
                        .HasForeignKey("id_article")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("realworld_api.Models.Tag", "tag")
                        .WithMany("articles")
                        .HasForeignKey("id_tag")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("article");

                    b.Navigation("tag");
                });

            modelBuilder.Entity("realworld_api.Models.Comment", b =>
                {
                    b.HasOne("realworld_api.Models.Article", "article")
                        .WithMany("comments")
                        .HasForeignKey("id_article")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("realworld_api.Models.User", "user")
                        .WithMany("comments")
                        .HasForeignKey("id_user")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("article");

                    b.Navigation("user");
                });

            modelBuilder.Entity("realworld_api.Models.ProfileFollowing", b =>
                {
                    b.HasOne("realworld_api.Models.User", "user_observer")
                        .WithMany("following")
                        .HasForeignKey("id_user_observer")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("realworld_api.Models.User", "user_target")
                        .WithMany("followers")
                        .HasForeignKey("id_user_target")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("user_observer");

                    b.Navigation("user_target");
                });

            modelBuilder.Entity("realworld_api.Models.UserFavorite", b =>
                {
                    b.HasOne("realworld_api.Models.Article", "article_favorited")
                        .WithMany("user_favorite")
                        .HasForeignKey("id_article_favorite")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("realworld_api.Models.User", "user")
                        .WithMany("user_favorite")
                        .HasForeignKey("id_user")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("article_favorited");

                    b.Navigation("user");
                });

            modelBuilder.Entity("realworld_api.Models.Article", b =>
                {
                    b.Navigation("comments");

                    b.Navigation("tags");

                    b.Navigation("user_favorite");
                });

            modelBuilder.Entity("realworld_api.Models.Tag", b =>
                {
                    b.Navigation("articles");
                });

            modelBuilder.Entity("realworld_api.Models.User", b =>
                {
                    b.Navigation("articles");

                    b.Navigation("comments");

                    b.Navigation("followers");

                    b.Navigation("following");

                    b.Navigation("user_favorite");
                });
#pragma warning restore 612, 618
        }
    }
}
